:block(button):mod(theme islands) {
    /* font-family: $button-fontFamily; */

    position: relative;

    display: inline-block;

    margin: 0;
    padding: 0;

    user-select: none;

    color: var(--color-control-typo-primary);
    border: 0;
    border-radius: $button-borderRadius;
    outline: 0;
    background: var(--color-control-default);

    text-align: center;
    white-space: nowrap;

    -webkit-tap-highlight-color: var(--color-control-typo-primary);

    &::-moz-focus-inner {
        padding: 0;

        border: 0;
    }


    :block(button):elem(text) {
        position: relative;

        display: inline-block;
        overflow: hidden;

        text-overflow: ellipsis;
        vertical-align: top;
    }

    :block(icon) {
        position: relative;
        height: 100%;
    }

    &:block(button):mod(type link) {
        text-decoration: none;
    }

    /* Decorative element (inner background) */
    &:before {
        position: absolute;
        top: $button-before-space;
        right: $button-before-space;
        bottom: $button-before-space;
        left: $button-before-space;

        content: '';

        border-radius: $button-before-borderRadius;
        background: var(--color-control-default);
    }

    &:block(button):mod(hovered) {
        cursor: pointer;

        background: var(--color-control-hover);
    }

    &:block(button):mod(focused-hard) {
        z-index: 1;

        background: var(--color-control-border-focus);

        &:block(button):before {
            box-shadow: $button-focused-boxShadow var(--color-control-border-focus), inset $button-focused-boxShadow-inset var(--color-control-border-focus);
        }
    }

    &:block(button):mod(pressed):before {
        background: var(--color-control-press);
    }

    &:block(button):mod(checked) {
        color: var(--color-control-typo-internal);

        &:before {
            background: var(--color-control-check);
        }

        &:block(button):mod(pressed) {
            background: var(--color-control-border-check-press);

            &:before {
                background: var(--color-control-check-press);
            }
        }

        &:block(button):mod(hovered) {
            background: var(--color-control-hover);
        }
    }

    &:block(button):mod(view plain) {
        background: none;

        &:block(button):mod(pressed) {
            background: var(--color-control-press);
        }

        &:block(button):mod(checked) {
            background: var(--color-control-check);

            &:block(button):mod(pressed) {
                background: var(--color-control-check-press);
            }
        }

        &:block(button):mod(disabled) {
            background: none;
        }
    }

    &:block(button):mod(view action) {
        background: var(--color-control-action);
        color: var(--color-control-typo-internal);

        &:before {
            display: none;
        }

        &:block(button):mod(hovered) {
            background: var(--color-control-action-hover);
        }

        &:block(button):mod(pressed) {
            background: var(--color-control-action-press);
        }

        &:block(button):mod(focused-hard) {
            animation: button-action-focus 0.5s infinite linear alternate;

            box-shadow: none;
        }
    }

    &:block(button):mod(view pseudo) {
        overflow: hidden;

        background: none;

        &:before {
            background: none;
            box-shadow: $button-pseudo-before-boxShadow var(--color-control-border);
        }

        &:block(button):mod(hovered):before {
            box-shadow: $button-pseudo-hovered-boxShadow var(--color-control-border-hover);
        }

        &:block(button):mod(pressed):before {
            background: var(--color-control-press);
        }

        &:block(button):mod(checked) {
            &:before {
                background: var(--color-control-check);
                box-shadow: $button-checked-before-boxShadow var(--color-control-border-check);
            }

            &:block(button):mod(hovered):before {
                box-shadow: $button-pseudo-hovered-boxShadow var(--color-control-border-hover);
            }

            &:block(button):mod(pressed):before {
                background: var(--color-check);
                box-shadow: $button-pseudo-pressed-boxShadow var(--color-control-border-press);
            }
        }
    }

    &:block(button):mod(disabled) {
        background: var(--color-control-disable);

        &:before {
            display: none;
        }

        &:block(button):mod(checked) {
            background: var(--color-control-disable-check);
        }

        :block(button):elem(text) {
            color: var(--color-control-typo-disable);
        }

        :block(icon) {
            opacity: 0.3;
        }
    }

    &:block(button):mod(size s) {
        font-size: $button-size-s-font;
        line-height: $button-size-s-lineHeight;

        :block(icon) {
            width: $button-size-s-icon-width;
        }

        :block(button):elem(text) {
            margin: $button-size-s-text-margin;
        }
    }

    &:block(button):mod(size m) {
        font-size: $button-size-m-font;
        line-height: $button-size-m-lineHeight;

        :block(icon) {
            width: $button-size-m-icon-width;
        }

        :block(button):elem(text) {
            margin: $button-size-m-text-margin;
        }
    }

    &:block(button):mod(size l) {
        font-size: $button-size-l-font;
        line-height: $button-size-l-lineHeight;

        :block(icon) {
            width: $button-size-l-icon-width;
        }

        :block(button):elem(text) {
            margin: $button-size-l-text-margin;
        }
    }

    &:block(button):mod(size xl) {
        font-size: $button-size-xl-font;
        line-height: $button-size-xl-lineHeight;

        :block(icon) {
            width: $button-size-xl-icon-width;
        }

        :block(button):elem(text) {
            margin: $button-size-xl-text-margin;
        }
    }

    & :block(icon) + :block(button):elem(text) {
        margin-left: 0;
    }

    :block(button):elem(text):not(:last-child) {
        margin-right: 0;
    }
    

    &:block(button):mod(width available) {
        width: 100%;
    }
}

@keyframes button-action-focus {
    from {
        background-color: var(--color-control-action);
    }

    to {
        background-color: var(--color-control-action-focus);
    }
}

:block(control-group) {
    :block(button):mod(checked) + :block(button):mod(theme islands):before,
    :block(radio):mod(checked) + :block(radio) :block(button):mod(theme islands):before,
    :block(checkbox):mod(checked) + :block(checkbox) :block(button):mod(theme islands):before {
        left: 0;
    }

    :block(button):mod(theme islands) {
        border-radius: $control-group-borderRadius;

        &:before {
            right: 0;

            border-radius: $control-group-before-borderRadius;
            background: var(--color-control-default);

            top: 2px ; /* вынести в переменную типа $control-group button-before-space */
            right: 2px;
            bottom: 2px;
            left: 2px;

        }

        &:block(button):mod(hovered) {
            cursor: pointer;

            background: var(--color-control-default);
        }

        &:block(button):mod(checked):before {
            right: 1px;
            background: var(--color-control-check);
        }

        &:block(button):mod(focused-hard):block(button):before {
            left: 0;
        }
    }

    > :block(button):mod(theme islands):first-child,
    > :first-child :block(button):mod(theme islands),
    > :first-child:block(popup) + :block(button):mod(theme islands) {
        border-radius: $control-group-first-child-borderRadius;

        &:before {
            border-radius: $control-group-first-child-before-borderRadius;
        }

        &:block(button):mod(focused-hard):block(button):before {
            left: 1px;
        }
    }

    > :block(button):mod(theme islands):last-child,
    > :last-child :block(button):mod(theme islands) {
        border-radius: $control-group-last-child-borderRadius;

        &:before {
            border-radius: $control-group-last-child-before-borderRadius;
            right: $control-group-last-child-before-border;
        }
    }

    > :only-child :block(button):mod(theme islands) {
        border-radius: $control-group-only-child-borderRadius;

        &:before {
            border-radius: $control-group-only-child-before-borderRadius;
        }
    }
}
